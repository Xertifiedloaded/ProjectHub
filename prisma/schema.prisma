generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  name       String
  image      String?
  role       String    @default("student")
  department String?
  projects   Project[]
  comments   Comment[]
  likes      Like[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String        @db.ObjectId
  year        Int
  tags        String[]
  category    String
  files       ProjectFile[]
  thumbnail   String?
  downloads   Int           @default(0)
  likes       Like[]
  comments    Comment[]
  status      ProjectStatus @default(draft)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProjectFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  public_id String
  size      Int
  type      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
}

enum ProjectStatus {
  draft
  published
  archived
}
